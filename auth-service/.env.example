FLASK_ENV=development
FLASK_APP=run.py
FLASK_DEBUG=1
USE_RELOADER=0

JWT_SECRET_KEY=clave_jwt_123
JWT_ACCESS_TOKEN_EXPIRES=900
JWT_REFRESH_TOKEN_EXPIRES=86400

MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=True
MAIL_USE_SSL=False

MAIL_USERNAME=xxxxxx@gmail.com # correo electrónico del remitente que se usará para enviar los códigos de 2FA
MAIL_PASSWORD=xxx xxx xxx xxx # contraseña o token de aplicación del correo remitente (NO usar la contraseña real en repositorios)
MAIL_DEFAULT_SENDER=xxxxxx@gmail.com #dirección que aparecerá como remitente en los emails enviados (normalmente igual a MAIL_USERNAME)
EMAIL_VERIFICATION_URL=http://localhost:5002/api/verificar-email  # cambiar esto cuando lo conectes con frontend
DEVICE_VERIFICATION_URL=http://localhost:5002/api/verificar-dispositivo
PASSWORD_RESET_URL=http://localhost:5002/api/verificar-token-password
USER_EMAIL_MODIFICATION_URL=http://localhost:5002/api/auth/confirmar-modificar-email
USER_DELETION_CONFIRM_URL=http://localhost:5002/api/auth/confirmar-eliminacion


USER_RESTORE_URL=http://localhost:5002/api/auth/super-admin/restaurar-usuario
USER_RESTORE_CONFIRM_URL=http://localhost:5002/api/auth/confirmar-restauracion
# Para probar el 2FA, configurar aca un email desde el que se van a enviar el token.
# Se recomienda usar un correo de prueba o un servicio de email con token de aplicación para 
# evitar exponer contraseñas reales.
PERSONA_SERVICE_URL=http://persona-backend:5001
COMPONENT_SERVICE_URL=http://component-service:5002

REDIS_HOST=localhost
REDIS_PORT=6379

#configuracion de postgres
POSTGRES_HOST=auth-db
POSTGRES_PORT=5432
POSTGRES_USER=usuario
POSTGRES_PASSWORD=pass
POSTGRES_DB=auth_db